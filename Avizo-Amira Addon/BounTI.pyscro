class BoneSegmentation(PyScriptObject):
    def __init__(self):
        import _hx_core
        _hx_core._tcl_interp('startLogInhibitor')

        # Input port: it will only handle HxUniformScalarField3:
        self.input = HxConnection(self, "input", "Input Volume")
        self.input.valid_types = ('HxUniformScalarField3')

        # Input port: it will only handle HxUniformScalarField3:
        self.inputL = HxConnection(self, "inputL", "Input Label")
        self.inputL.valid_types = ('HxUniformLabelField3')


        # This port will number of segments size.
        self.n = HxPortIntSlider(self, "n", "Number of Segments")
        self.n.clamp_range = (1, 100)
        self.n.value = 14

        # This port will define number of iterations.
        self.iters = HxPortIntSlider(self, "iters", "Number of Iterations")
        self.iters.clamp_range = (1, 1000)
        self.iters.value = 7

        # This port will define initial threshold.
        self.threshinit = HxPortIntSlider(self, "threshinit", "Initial Threshold")
        self.threshinit.clamp_range = (0, 100000)
        self.threshinit.value = 34000

        # This port will define target threshold.
        self.threshfin = HxPortIntSlider(self, "threshfin", "Target Threshold")
        self.threshfin.clamp_range = (0, 100000)
        self.threshfin.value = 21500


        # Seed Dilation
        self.sradio_boxes = HxPortRadioBox(self,"SD", "Seed Dilation")
        self.sradio_boxes.radio_boxes = [HxPortRadioBox.RadioBox(label="On"),
        HxPortRadioBox.RadioBox(label="Off")]
        self.sradio_boxes.selected = 1

        # Label preservation
        self.lpradio_boxes = HxPortRadioBox(self,"LP", "Label Preservation")
        self.lpradio_boxes.radio_boxes = [HxPortRadioBox.RadioBox(label="On"),
        HxPortRadioBox.RadioBox(label="Off")]
        self.lpradio_boxes.selected = 1

        # Save Seed
        self.ssradio_boxes = HxPortRadioBox(self,"SS", "Save Seed")
        self.ssradio_boxes.radio_boxes = [HxPortRadioBox.RadioBox(label="On"),
        HxPortRadioBox.RadioBox(label="Off")]
        self.ssradio_boxes.selected = 1


        # Classic 'Apply' button:
        self.do_it = HxPortDoIt(self, "apply", "Apply")

        _hx_core._tcl_interp('stopLogInhibitor')

    def update(self):
        if not self.inputL.is_new:
            return
        if self.inputL.source() is None:
            self.iters.visible = True
            self.threshinit.visible = True
            self.threshfin.visible = True
            self.sradio_boxes.visible = True
            self.ssradio_boxes.visible = True
            self.lpradio_boxes.visible = False
        elif self.inputL.source is not None:
            self.iters.visible = True
            self.threshinit.visible = True
            self.threshfin.visible = True
            self.sradio_boxes.visible = True
            self.ssradio_boxes.visible = True
            self.lpradio_boxes.visible = True
        pass

    def compute(self):
        # Does the user press the 'Apply' button?
        if not self.do_it.was_hit:
            return

        # Is there an input data connected?
        if self.input.source() is None:
            return
        # Retrieve the input data.
        input = self.input.source()
        labeldata = self.inputL.source()
        # Check if the output field exists and create it
        if isinstance(self.results[0], HxRegScalarField3) is False:
            result = hx_project.create('HxUniformLabelField3')
            result.name = input.name + ".Segmentation"
        else:
            result = self.results[0]

        import numpy as np
        from scipy import ndimage as ndi
        import warnings
        from skimage.morphology import ball
        import gc


        def get_largest(label, segments):
            labels, _ = ndi.label(label)
            assert (labels.max() != 0)
            number = 0
            try:
                bincount = np.bincount(labels.flat)[1:]
                bincount_sorted = np.sort(bincount)[::-1]
                largest = labels - labels
                m = 0
                for i in range(segments):
                    index = int(np.where(bincount == bincount_sorted[i])[0][m]) + 1
                    ilargest = labels == index
                    largest += np.where(ilargest, i + 1, 0)
                if i == segments - 1:
                    number = segments
            except:
                warnings.warn(f"Number of segments should be reduced to {i}")
                if number == 0:
                    number = i
            return largest, number

        def grow(labels, number):
            grownlabels = np.copy(labels)
            for i in range(number):
                filtered = np.where(labels == i + 1, 1, 0)
                grown = ndi.binary_dilation(np.copy(filtered), structure=ball(2)).astype(np.uint16)
                grownlabels = np.where(np.copy(grown), i + 1, np.copy(grownlabels))
                del grown
                del filtered
            return grownlabels

        def bbox2_3D(img):
            r = np.any(img, axis=(1, 2))
            c = np.any(img, axis=(0, 2))
            z = np.any(img, axis=(0, 1))

            rmin, rmax = np.where(r)[0][[0, -1]]
            cmin, cmax = np.where(c)[0][[0, -1]]
            zmin, zmax = np.where(z)[0][[0, -1]]

            return rmin, rmax, cmin, cmax, zmin, zmax

        def segmentation(volume_array, initial_threshold, target_threshold, segments, iterations, label=False,
                         label_preserve=False, seed_dilation=False):

            if type(label) == bool:
                volume_label = volume_array > initial_threshold
            else:
                volume_label = label

            if label_preserve == False:
                seed, number = get_largest(volume_label, segments)
            else:
                seed = volume_label
                number = segments

            if seed_dilation == True:
                formed_seed = grow(seed, number)
            else:
                formed_seed = seed

            labeled_volume = np.copy(formed_seed)
            with hx_progress.progress(iters * number, "Refining") as progress:
                for i in range(iterations + 1):
                    volume_label = volume_array > initial_threshold - (
                                i * (initial_threshold - target_threshold) / iterations)
                    volume_label = np.where(labeled_volume != 0, False, volume_label)
                    if progress.interrupted:
                        break
                    for j in range(number):
                        hx_progress.set_text(f"Refining -- Iter:{i} -- Label:{j}")
                        try:
                            rmin, rmax, cmin, cmax, zmin, zmax = bbox2_3D(labeled_volume == j + 1)
                        except:
                            rmin, rmax, cmin, cmax, zmin, zmax = -1, 1000000, -1, 1000000, -1, 1000000
                        maximum = labeled_volume.shape
                        rmin = max(0, rmin - int((rmax - rmin) * 0.1))
                        rmax = min(int((rmax - rmin) * 0.1) + rmax, maximum[0])
                        cmin = max(0, cmin - int((cmax - cmin) * 0.1))
                        cmax = min(int((cmax - cmin) * 0.1) + cmax, maximum[1])
                        zmin = max(0, zmin - int((zmax - zmin) * 0.1))
                        zmax = min(int((zmax - zmin) * 0.1) + zmax, maximum[2])
                        temp_label = np.copy(volume_label)
                        reduced_labeled_volume = labeled_volume[rmin:rmax, cmin:cmax, zmin:zmax]
                        temp_label[rmin:rmax, cmin:cmax, zmin:zmax] = np.copy(volume_label)[rmin:rmax, cmin:cmax,
                                                                      zmin:zmax] + (
                                                                              reduced_labeled_volume == j + 1)
                        pos = np.where(reduced_labeled_volume == j + 1)
                        labeled_volume[rmin:rmax, cmin:cmax, zmin:zmax] = np.where(reduced_labeled_volume == j + 1, 0,
                                                                                   reduced_labeled_volume)
                        labeled_temp, _ = ndi.label(np.copy(temp_label[rmin:rmax, cmin:cmax, zmin:zmax]))
                        try:
                            index = int(labeled_temp[pos[0][0], pos[1][0], pos[2][0]])
                        except:
                            index = 1
                        try:
                            relabelled = np.copy(labeled_temp) == index
                            labeled_volume[rmin:rmax, cmin:cmax, zmin:zmax] = np.where(np.copy(relabelled), j + 1,
                                                                                       labeled_volume[rmin:rmax, cmin:cmax,
                                                                                       zmin:zmax])
                            del temp_label
                            del pos
                            del labeled_temp
                            del relabelled
                            gc.collect()
                            progress.current_step = i*number+j
                            if progress.interrupted:
                                break
                        except:
                            print(f"missing {j}")
                    # step = hx_project.create('HxUniformLabelField3')
                    # step.name = input.name + f".Step{i}"
                    # step.set_array(np.array(labeled_volume, dtype=np.ushort))
                    # step.bounding_box = input.bounding_box
            return labeled_volume, formed_seed

        # Retrieve the values:
        number = self.n.value
        iters = self.iters.value
        initial_threshold = self.threshinit.value
        target_threshold = self.threshfin.value
        dilation = self.sradio_boxes.selected
        preservation = self.lpradio_boxes.selected
        saveseed = self.ssradio_boxes.selected

        if dilation == 0:
            dilation = True
        else:
            dilation = False
        if preservation == 0:
            preservation = True
        else:
            preservation = False
        if saveseed == 0:
            saveseed = True
        else:
            saveseed = False

        # Compute our output array:
        volume_array = np.array(input.get_array(), dtype = np.ushort)
        if labeldata:
            labeled = np.array(labeldata.get_array(), dtype=np.ushort)
        else:
            labeled = False

        labeled_volume, formed_seed = segmentation(volume_array,initial_threshold,target_threshold,number,iters,label = labeled,label_preserve=preservation,seed_dilation=dilation)

        # convert
        mConvert = hx_project
        result.set_array(np.array(labeled_volume, dtype = np.ushort))
        if saveseed:
            seed = hx_project.create('HxUniformLabelField3')
            seed.name = input.name + ".Seed"
            seed.set_array(np.array(formed_seed, dtype=np.ushort))
            seed.bounding_box = input.bounding_box
        # Output bounding-box is the same as input bbox.
        result.bounding_box = input.bounding_box




        # Set as current result.
        self.results[0] = result

